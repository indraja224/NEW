## XML

Select-Xml -Path "C:\Users\PINDRAJA\OneDrive - Capgemini\Desktop\sample.xml" -XPath "computers/computer/Name"

Select-Xml -Path "C:\Users\PINDRAJA\OneDrive - Capgemini\Desktop\sample.xml" -XPath '/Computers/Computer'| ForEach-Object { $_.Node.name}

[xml]$xmlAttributr=get-content -Path "C:\Users\PINDRAJA\OneDrive - Capgemini\Desktop\XmlAttribute.xml"
[xml]$xmlele=Get-Content  "C:\Users\PINDRAJA\OneDrive - Capgemini\Desktop\XmlEle.xml"| ForEach-Object {$_.Computers}

#####  Reading XML Object Elements


$xmlAttributr.Computers.Computer.name

[xml]$xmlAttributr=Get-Content -Path "C:\Users\PINDRAJA\OneDrive - Capgemini\Desktop\XmlAttribute.xml"
$xmlAttributr.Computers.Computer| Where-Object include -EQ "true"| ForEach-Object {
if(Test-Connection -ComputerName $_.ip -Count 1 -Quiet){
$status="the Connect is okay"
}
else{
$status="The connection is not Okay"
}
[pscustomobject]@{
Name=$_.name
Status=$status
}


}

####   Validating XML Data

### creating an XML Schema
<people>
<person Name="Jeff" Country="India"  Isadmin='true'/>
</people>


function New-XmlSchema
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory)]
        [ValidateScript({ Test-Path -Path $_ })]
        [ValidatePattern('\.xml')]
        [string]$XmlExample
    ) 

    $item = Get-Item $XmlExample
    $dir = $item.Directory
    $name = $item.Name
    $baseName = $item.BaseName

    ## build the schema path by replacing '.xml' with '.xsd'
    $SchemaPath = "$dir\$baseName.xsd"

    try
    {
        $dataSet = New-Object -TypeName System.Data.DataSet
        $dataSet.ReadXml($XmlExample) | Out-Null
        $dataSet.WriteXmlSchema($SchemaPath)
        
        ## show the resulted schema file
        Get-Item $SchemaPath
    }
    catch
    {
        $err = $_.Exception.Message
        Write-Host "Failed to create XML schema for $XmlExample`nDetails: $err" -ForegroundColor Red
    }
}
